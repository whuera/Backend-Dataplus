package ec.com.app.bundle.backend;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

//import org.springframework.cloud.client.loadbalancer.LoadBalanced;
import ec.com.app.bundle.backend.model.ContactSendMail;
import ec.com.app.bundle.backend.model.User;
import ec.com.app.bundle.backend.repository.UserRepository;
import ec.com.app.bundle.backend.service.ContactSendMailService;


/**
 * The Class MainController.
 */
@RestController    // This means that this class is a Controller
@RequestMapping(path="/") // This means URL's start with /demo (after Application path)
public class MainController {
	
	/** The user repository. */
	//	@LoadBalanced
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	
	/** The contact send mail service. */
	@Autowired
	private ContactSendMailService contactSendMailService;

	//private final static String ERROR_PATH = "/error";



	/**
	 * Adds the new user.
	 *
	 * @param name the name
	 * @param email the email
	 * @return the string
	 */
	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		n.setName(name);
		n.setEmail(email);
		userRepository.save(n);
		return "Saved";
	}

	/**
	 * Gets the all users.
	 *
	 * @return the all users
	 */
	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}

	/**
	 * Gets the contacts.
	 *
	 * @return the contacts
	 */
	@GetMapping(path="/allContacts")
	public @ResponseBody Iterable<ContactSendMail> getContacts() {
		// This returns a JSON or XML with the users
		return contactSendMailService.findAll();
	}

	/**
	 * Gets the all contacts.
	 *
	 * @return the all contacts
	 */
	@RequestMapping(value="/allGetContacts", method = RequestMethod.GET,produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<List<ContactSendMail>> getAllContacts() {
		// This returns a JSON or XML with the users
		List<ContactSendMail> contacts = contactSendMailService.findAll();
		if(contacts.isEmpty()){
			return new ResponseEntity<List<ContactSendMail>>(HttpStatus.NO_CONTENT);
		}
		return new ResponseEntity<List<ContactSendMail>>(contacts, HttpStatus.OK);

	}

	/**
	 * Gets the contact by name.
	 *
	 * @param names the names
	 * @return the contact by name
	 */
	@RequestMapping(value="/getContactByName", method = RequestMethod.GET,produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<ContactSendMail> getContactByName(@RequestParam String names) {
		// This returns a JSON or XML with the users
		ContactSendMail contacts = contactSendMailService.findByNames(names);
		if(contacts.equals(null)){
			return new ResponseEntity<ContactSendMail>(HttpStatus.NO_CONTENT);
		}
		return new ResponseEntity<ContactSendMail>(contacts, HttpStatus.OK);

	}
	
	/**
	 * Gets the contact by id.
	 *
	 * @param id the id
	 * @return the contact by id
	 */
	@RequestMapping(value="/getContactById", method = RequestMethod.GET,produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<ContactSendMail> getContactById(@RequestParam int id) {
		// This returns a JSON or XML with the users
		ContactSendMail contact = contactSendMailService.findById(id);
		if(contact.equals(null)){
			return new ResponseEntity<ContactSendMail>(HttpStatus.NO_CONTENT);
		}
		return new ResponseEntity<ContactSendMail>(contact, HttpStatus.OK);

	}
	
	
	@PostMapping(value="/saveContact",  produces="application/json", consumes="application/json")
	public ResponseEntity<ContactSendMail> saveContact(@Valid @RequestBody ContactSendMail contactSendMail) {
		// This returns a JSON or XML with the users
		ContactSendMail contact = contactSendMailService.saveContactSendMail(contactSendMail);
		if(contact.equals(null)){
			return new ResponseEntity<ContactSendMail>(HttpStatus.NO_CONTENT);
		}
		return new ResponseEntity<ContactSendMail>(contact, HttpStatus.OK);

	}

}
